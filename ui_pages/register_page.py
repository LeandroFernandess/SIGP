"""
M√≥dulo para renderizar o formul√°rio de registro de nova conta.

Este script define a interface do usu√°rio para a cria√ß√£o de novas contas.
Ele lida com a entrada de e-mail e senha, valida os requisitos de seguran√ßa da senha
e coordena a comunica√ß√£o com o servi√ßo de autentica√ß√£o para registrar o usu√°rio.
"""

import streamlit as st
import re
from core.auth_service import AuthService
from time import sleep


def _get_password_requirements(password: str) -> dict:
    """Verifica se a senha atende aos crit√©rios de seguran√ßa e retorna um dicion√°rio de resultados.

    Args:
        password (str): A senha a ser validada.

    Returns:
        dict: Um dicion√°rio onde as chaves s√£o os crit√©rios de seguran√ßa e os valores
              s√£o booleanos (`True` se o requisito for atendido, `False` caso contr√°rio).
    """
    results = {
        "length": len(password) >= 8,
        "uppercase": bool(re.search(r"[A-Z]", password)),
        "lowercase": bool(re.search(r"[a-z]", password)),
        "digit": bool(re.search(r"\d", password)),
        "special_char": bool(
            re.search(r"[!@#$%^&*()_+\-=\[\]{};':\"\\|,.<>/?`~]", password)
        ),
    }
    return results


def _is_strong_password(password: str) -> bool:
    """Verifica se a senha atende a todos os crit√©rios de seguran√ßa.

    Args:
        password (str): A senha a ser verificada.

    Returns:
        bool: `True` se a senha atende a todos os requisitos de seguran√ßa,
              caso contr√°rio, `False`.
    """
    results = _get_password_requirements(password)
    return all(results.values())


def show_register_form(auth_service: AuthService, on_navigate: callable):
    """Exibe o formul√°rio de registro de nova conta.

    Permite que o usu√°rio insira suas informa√ß√µes para criar uma nova conta.
    O formul√°rio inclui valida√ß√£o de senha e exibe os requisitos de seguran√ßa
    em tempo real. Ap√≥s um registro bem-sucedido, ele navega de volta para
    a p√°gina de login.

    Args:
        auth_service (AuthService): Inst√¢ncia do servi√ßo de autentica√ß√£o para
            realizar a cria√ß√£o do usu√°rio.
        on_navigate (callable): Fun√ß√£o de callback para navegar entre as
            p√°ginas da aplica√ß√£o.
    """
    st.subheader("Criar Nova Conta üìù‚ú®")
    with st.form("register_form", clear_on_submit=False):
        new_email = st.text_input("E-mail", key="reg_email")
        new_password = st.text_input("Senha", type="password", key="reg_password")

        if new_password:
            requirements = _get_password_requirements(new_password)
            st.markdown("---")
            st.write("**A senha deve conter:**")
            st.markdown(
                f"- {'‚úÖ' if requirements['length'] else '‚ùå'} M√≠nimo de 8 caracteres"
            )
            st.markdown(
                f"- {'‚úÖ' if requirements['uppercase'] else '‚ùå'} Pelo menos 1 letra mai√∫scula"
            )
            st.markdown(
                f"- {'‚úÖ' if requirements['lowercase'] else '‚ùå'} Pelo menos 1 letra min√∫scula"
            )
            st.markdown(
                f"- {'‚úÖ' if requirements['digit'] else '‚ùå'} Pelo menos 1 d√≠gito"
            )
            st.markdown(
                f"- {'‚úÖ' if requirements['special_char'] else '‚ùå'} Pelo menos 1 caractere especial"
            )
            st.markdown("---")

        display_name = st.text_input("Nome de Exibi√ß√£o", key="reg_display_name")
        submitted = st.form_submit_button("Registrar")

        if submitted:
            if new_email and new_password:
                if not _is_strong_password(new_password):
                    st.error("Por favor, atenda a todos os requisitos de senha. ‚ùå")
                else:
                    user_uid = auth_service.create_new_user_and_profile(
                        new_email, new_password, display_name
                    )
                    if user_uid:
                        st.success(
                            f"Usu√°rio '{display_name or new_email}' registrado com sucesso! Redirecionando para o login... ‚úÖ"
                        )
                        my_bar = st.progress(0)
                        for percent_complete in range(100):
                            sleep(0.02)
                            my_bar.progress(percent_complete + 1)

                        my_bar.empty()
                        on_navigate("login")
                    else:
                        st.error(
                            "Erro ao registrar usu√°rio. O e-mail pode j√° estar em uso. ‚ùå"
                        )
            else:
                st.warning("Por favor, preencha e-mail e senha para registrar. ‚ö†Ô∏è")

    if st.button("Voltar ao Login", key="back_to_login_reg"):
        on_navigate("login")
